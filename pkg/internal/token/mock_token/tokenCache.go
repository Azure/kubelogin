// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/kubelogin/pkg/internal/token (interfaces: TokenCache)
//
// Generated by this command:
//
//	mockgen -destination mock_token/tokenCache.go github.com/Azure/kubelogin/pkg/internal/token TokenCache
//
// Package mock_token is a generated GoMock package.
package mock_token

import (
	reflect "reflect"

	adal "github.com/Azure/go-autorest/autorest/adal"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenCache is a mock of TokenCache interface.
type MockTokenCache struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCacheMockRecorder
}

// MockTokenCacheMockRecorder is the mock recorder for MockTokenCache.
type MockTokenCacheMockRecorder struct {
	mock *MockTokenCache
}

// NewMockTokenCache creates a new mock instance.
func NewMockTokenCache(ctrl *gomock.Controller) *MockTokenCache {
	mock := &MockTokenCache{ctrl: ctrl}
	mock.recorder = &MockTokenCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCache) EXPECT() *MockTokenCacheMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTokenCache) Read(arg0 string) (adal.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(adal.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTokenCacheMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTokenCache)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockTokenCache) Write(arg0 string, arg1 adal.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTokenCacheMockRecorder) Write(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTokenCache)(nil).Write), arg0, arg1)
}
